apply plugin: 'com.android.feature'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

archivesBaseName = 'sdk-search'

android {
  compileSdkVersion buildConfig.compileSdk

  baseFeature true

  defaultConfig {
    minSdkVersion buildConfig.minSdk
    targetSdkVersion buildConfig.targetSdk

    versionCode buildConfig.version.code
    versionName buildConfig.version.name

    resConfigs 'en'

    buildConfigField 'String', 'BUGSNAG_API_KEY', "\"${propOrEmpty('SDK_SEARCH_BUGSNAG_API_KEY')}\""
    buildConfigField 'boolean', 'IS_CI_BUILD', 'false' // May be overridden by a build type.
    buildConfigField 'String', 'COMMIT_SHA', "\"${gitSha()}\""
    buildConfigField 'long', 'COMMIT_UNIX_TIMESTAMP', gitTimestamp().toString() + "L"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'sdksearch'
      keyAlias 'sdksearch'
      keyPassword 'sdksearch'
    }
    if (file('upload.keystore').exists()) {
      upload {
        storeFile file('upload.keystore')
        storePassword propOrEmpty('SDK_SEARCH_UPLOAD_STORE_PASSWORD')
        keyAlias 'sdksearch'
        keyPassword propOrEmpty('SDK_SEARCH_UPLOAD_KEY_PASSWORD')
      }
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug

      buildConfigField 'boolean', 'IS_CI_BUILD', isCiBuild.toString()
      buildConfigField 'String', 'CIRCLE_CI_TOKEN', "\"${propOrEmpty('SDK_SEARCH_CIRCLE_CI_TOKEN')}\""
    }
    release {
      if (file('upload.keystore').exists()) {
        signingConfig signingConfigs.upload
      } else {
        signingConfig signingConfigs.debug
      }

      minifyEnabled true
      shrinkResources true
      proguardFiles(file('src/main/shrinker-rules.pro'))
    }
  }

  packagingOptions {
    exclude 'kotlin/**'
    exclude '**/*.kotlin_metadata'
    exclude 'META-INF/*.kotlin_module'
    exclude 'META-INF/*.version'
  }

  bundle {
    language {
      enableSplit = false // We currently only have one language.
    }
  }
}

dependencies {
  implementation project(':search:ui-android')
  implementation project(':store:item:android-sql')
  implementation project(':references:jdk')

  debugImplementation project(':options:ui-android')
  debugImplementation project(':store:config:android-preferences')

  debugImplementation project(':debug-updater')

  implementation deps.kotlin.stdlib.jdk
  implementation deps.kotlin.coroutines.jdk
  implementation deps.kotlin.coroutines.android

  implementation deps.android.support.customTabs
  implementation deps.android.support.appCompat
  implementation deps.android.x.coreKtx

  implementation deps.okhttp.logging

  implementation deps.byteunits

  implementation deps.timber.android
  implementation deps.bugsnag
  implementation project(':bugsnag-tree')

  implementation deps.dagger.runtime
  implementation deps.dagger.androidRuntime
  kapt deps.dagger.compiler
  kapt deps.dagger.androidCompiler
}

kotlin {
  experimental {
    coroutines 'enable'
  }
}
